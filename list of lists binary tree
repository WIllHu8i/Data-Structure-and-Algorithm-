def make_binary_tree(root):
    return [root,[],[]]

def insert_left(root, new_child):
    old_left = root.pop(1)
    if len(old_left)>0:
        root.insert(1,[new_child,old_left,[]])
    else:
        root.insert(1,[new_child,[],[]])

def insert_right(root, new_child):
    old_child = root.pop(2)
    if len(old_child)>0:
        root.insert(2,[new_child,[],old_child])
    else:
        root.insert(2,[new_child,[],[]])

def get_root_val(root):
    return root[0]

def set_root_val(root, new_value):
    root[0] = new_value

def get_left_child(root):
    return root[1]

def get_right_child(root):
    return root[2]

binary_tree = make_binary_tree("a")
insert_left(binary_tree,"b")
insert_right(get_left_child(binary_tree),"d")
insert_right(binary_tree,"c")
insert_left(get_right_child(binary_tree),"e")
insert_right(get_right_child(binary_tree),"f")
print(binary_tree)